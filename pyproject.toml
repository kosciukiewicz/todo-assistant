[tool.poetry]
name = "todo_assistant"
version = "0.1.0"
description = "LLM assistant for todo board"
authors = [
    "Witold Kosciukiewicz <kosciukiewicz.w@gmail.com>",
]

[tool.poetry.dependencies]
python = "3.11.5"
pydantic = "1.10.9"
langchain = "0.0.354"
langchain-openai = "^0.0.2"
langchain-visualizer = "^0.0.33"
langchainhub = "^0.1.14"
notion-client = "^2.2.1"
chromadb = "^0.4.22"
lark = "^1.1.9"
dependency-injector = "^4.41.0"
langgraph = "^0.0.19"

[tool.poetry.group.dev]

[tool.poetry.group.dev.dependencies]
pre-commit = "^2.17.0"
poethepoet = "^0.16.4"

[tool.poetry.group.test.dependencies]
black = "^23.10.1"
isort = { version = "^5.10.1", extras = ["pyproject"] }
mypy = "1.8.0"
coverage = { version = "^6.5.0", extras = ["toml"] }
flake8 = "^5.0.4"
flake8-bugbear = "^22.9.23"
flake8-comprehensions = "^3.10.0"

pytest = "^7.1.1"
pytest-cov = "4.0.0"
pytest-env = "^0.6.2"
pytest-mock = "^3.7.0"
pytest-asyncio = "^0.18.3"
pytest-random-order = "^1.0.4"
pytest-xdist = "^2.5.0"
pytest-sugar = "^0.9.5"
pytest-randomly = "^3.12.0"

[tool.poe.tasks]
black = "black --check ."
black_fix = "black ."
isort = "isort . -c"
isort_fix = "isort ."
flake8 = "flake8 ."
mypy = "mypy ."
pytest = "pytest ./tests -v"

check = ["black", "isort", "flake8", "mypy"]
fix = ["black_fix", "isort_fix"]
fix_check = ["fix", "check"]
tests = ["pytest"]
all = ["check", "pytest"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
target-version = ['py310']
skip-string-normalization = true
line-length = 100
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs
    | \.data
    | \.dvc
    | \.git
    | \.hg
    | \.mypy_cache
    | \.test_cache
    | \.tox
    | \.venv
    | storage
  )/
)
'''

[tool.isort]
profile = 'black'
line_length = 100

[tool.mypy]
ignore_missing_imports = true
python_version = "3.10"
exclude = "submodules"
plugins = [
  "pydantic.mypy"
]

[[tool.mypy.overrides]]
module = [
    "pandas",
    "tqdm.*",
    "yaml.*",
    "matplotlib.*",
    "plotly.*",
    "seaborn.*",
    "IPython.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = '''
  --tb=long
  --strict-markers
  --asyncio-mode=auto
  --junit-xml=.artifacts/tests.xml
  --no-cov-on-fail
  --asyncio-mode=auto
  --numprocesses=auto
'''

[tool.coverage.report]
show_missing = true
ignore_errors = true
exclude_lines = [
    # Regexes for lines to exclude from consideration
    'import',
    'from',
    # Have to re-enable the standard pragma
    'pragma: no cover',
    # Don't complain about missing debug-only code:
    'def __repr__',
    # Don't complain if test don't hit defensive assertion code:
    'raise AssertionError',
    'raise NotImplementedError',
    # Don't complain if non-runnable code isn't run:
    'if __name__ == .__main__.:',
    'pass',
    # Don't complain about abstract methods
    '@(abc\.)?abstractmethod'
]
